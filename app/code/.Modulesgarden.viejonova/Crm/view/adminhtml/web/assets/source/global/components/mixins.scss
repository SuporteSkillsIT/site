//
// Mixins
// Based on Twitter Bootstrap's _mixings.scss


/**
 *
 * ADDS A BROWSER PREFIX TO THE PROPERTY
 * Insane usefull, but Koala have autoprefixer....
 *
 * I'm gonna leave this peace of code here
 */
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}



// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Opacity

@mixin opacity($value)
{
  opacity: $value;
  filter: alpha(opacity=#{$value * 100});
}

// Border radius.

@mixin border-radius($radius, $important: '')
{
  -webkit-border-radius: $radius#{$important};
  -moz-border-radius: $radius#{$important};
  -ms-border-radius: $radius#{$important};
  -o-border-radius: $radius#{$important};
  border-radius: $radius#{$important};
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $input-color-placeholder)
{
  &::-moz-placeholder           { color: $color; opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
  &:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

// Drop shadows
// By default set to: none
@mixin box-shadow($shadow)
{
  -webkit-box-shadow: none; // iOS <4.3 & Android <4.1
     -moz-box-shadow: none;
          box-shadow: none;
}

// Set shadows
// By default set to: none
@mixin set-box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
  @if ($inset != "") {
    @include css3-prefix('box-shadow', $inset $x $y $blur $color);
  } @else {
    @include css3-prefix('box-shadow', $x $y $blur $color);
  }
}

// Set text shadow
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

// Vertical gradient, from top to bottom
// By default set to: none
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg)
{
  background-image: none;
  background-image: none;
}


// Panels
// -------------------------
@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border)
{
  border-color: $border;

  & > .panel-heading {
    color: $heading-text-color;
    background-color: $heading-bg-color;
    border-color: $heading-border;

    + .panel-collapse .panel-body {
      border-top-color: $border;
    }
  }
  & > .panel-footer {
    + .panel-collapse .panel-body {
      border-bottom-color: $border;
    }
  }
}

// add border to panel
@mixin panel-border($border-course, $border-lenght, $border-color)
{
  @if $border-course == left    { border-left: $border-lenght solid $border-color;  }
  @if $border-course == right   { border-right: $border-lenght solid $border-color;  }
  @if $border-course == top     { border-top: $border-lenght solid $border-color;  }
  @if $border-course == bottom  { border-bottom: $border-lenght solid $border-color;  }
  @if null       { border: $border-lenght solid $border-color; }

}



// Alerts
// -------------------------
@mixin alert-variant($background, $border, $text-color)
{
  background-color: $background;
  border-color: $border;
  color: $text-color;

  hr {
    border-top-color: darken($border, 5%);
  }
  .alert-link {
    color: darken($text-color, 10%);
  }
}



// Tables
// -------------------------
@mixin table-row-variant($state, $background, $text)
{
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.

  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.#{$state},
    > th.#{$state},
    &.#{$state} > td,
    &.#{$state} > th {
      background: $background;
      color: $text;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover > tbody > tr {
    > td.#{$state}:hover,
    > th.#{$state}:hover,
    &.#{$state}:hover > td,
    &.#{$state}:hover > th {
      background: darken($background, 5%);
    }
  }
}

// List Groups
// -------------------------
@mixin list-group-item-variant($state, $background, $color)
{
  .list-group-item-#{$state} {
    color: $color;
    background-color: $background;

    // [converter] extracted a& to a.list-group-item-#{$state}
  }

  a.list-group-item-#{$state} {
    color: $color;

    .list-group-item-heading { color: inherit; }

    &:hover,
    &:focus {
      color: $color;
      background-color: darken($background, 5%);
    }
    &.active,
    &.active:hover,
    &.active:focus {
      color: #fff;
      background-color: $color;
      border-color: $color;
    }
  }
}

//
//
// USed mainly for buttons
@mixin linear-gradient($fromColor, $toColor, $fallbackColor) {
  background-color: $fallbackColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}


// AWESOME BUTTTTTONS !
@mixin button-variant($color, $bg-from, $bg-to, $type: "")
{

  @if $bg-to == "" { $bg-to: darken($bg-from, 10%); }
  $tmp-border: darken(adjust-hue($bg-to, -10), 5%);
  // $tmp-border: $state-test-default-border;

  border: 1px solid $state-test-default-border;
  color: $color;
  @include linear-gradient($state-test-bg-from, $state-test-bg-to, $state-test-bg-to);
  @include text-shadow(1px, 1px, 0, #fff);

  &.btn-outline {
    color: darken($state-test-default-border, 40%);
    border-color: darken($state-test-default-border, 13%);
    background: transparent;
    text-shadow: none;

    &.btn-inverse {
      border-color: darken($state-test-default-border, 13%);
      color: darken($state-test-default-border, 40%);
      background: transparent !important;
      text-shadow: none;

      &:hover,
      &:focus,
      &:active,
      &.active {
        color: $color !important;
        background: transparent;
        text-shadow: none;

      }

    }

    > i {
        text-shadow: none !important;
    }

  }

  &:hover,
  &:focus,
  &:active,
  &.active {

    border-color: $tmp-border;
    border-bottom-color: darken($tmp-border, 10%);

    @if $type == ""
    {
      @if lightness($bg-to) < 50% {
        // dark color !
        @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
        color: #fff;
      } @else {
        @include text-shadow(1px, 1px, 0, #fff);
        color: #000;
      }
    } @elseif $type == "light" {
        @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
        color: #fff;
    } @else {
        @include text-shadow(1px, 1px, 0, #fff);
        color: #000;
    }

    @include linear-gradient($bg-from, $bg-to, $bg-to);


  }
  .open & {
    &.dropdown-toggle {
      border-color: $tmp-border;
      border-bottom-color: darken($tmp-border, 10%);

    @if $type == ""
    {
      @if lightness($bg-to) < 50% {
        // dark color !
        @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
        color: #fff;
      } @else {
        @include text-shadow(1px, 1px, 0, #fff);
        color: #000;
      }
    } @elseif $type == "light" {
        @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
        color: #fff;
    } @else {
        @include text-shadow(1px, 1px, 0, #fff);
        color: #000;
    }

      @include linear-gradient($bg-from, $bg-to, $bg-to);

    }
  }
  &:active,
  &.active {

    border-color: darken($tmp-border, 10%);
    border-bottom-color: darken($tmp-border, 15%);

    @include set-box-shadow(0, 0, 12px, rgba(0,0,0,.2), inset);

    // &:hover {
    //     @include linear-gradient($state-test-default-bg-from, $state-test-default-bg-to, $state-test-default-bg-to);
    // }
  }
  .open & {
    &.dropdown-toggle {
      // background-image: none;
      background-image: cyan;
      // color: cyan;
    }
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      border-color: $tmp-border;
      border-bottom-color: darken($tmp-border, 10%);

      @if $type == ""
      {
        @if lightness($bg-to) < 50% {
          // dark color !
          @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
          color: #fff;
        } @else {
          @include text-shadow(1px, 1px, 0, #fff);
          color: #000;
        }
      } @elseif $type == "light" {
          @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
          color: #fff;
      } @else {
          @include text-shadow(1px, 1px, 0, #fff);
          color: #000;
      }

        @include linear-gradient($bg-from, $bg-to, $bg-to);

    }
  }


  &.btn-inverse {

      @if $bg-to == "" { $bg-to: darken($bg-from, 10%); }
      $tmp-border: darken(adjust-hue($bg-to, -10), 5%);
      // $tmp-border: $state-test-default-border;


      border: 1px solid $tmp-border;
      @if $type == ""
      {
        @if lightness($bg-to) < 50% {
          // dark color !
          @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
          color: #fff;
          > i {
            @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
            color: #fff;
          }
        } @else {
          @include text-shadow(1px, 1px, 0, #fff);
          color: #000;
          > i {
            @include text-shadow(1px, 1px, 0, #fff);
            color: #000;
          }
        }
      } @elseif $type == "light" {
          @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
          color: #fff;
          > i {
            @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
            color: #fff;
          }
      } @else {
          @include text-shadow(1px, 1px, 0, #fff);
          color: #000;
          > i {
            @include text-shadow(1px, 1px, 0, #fff);
            color: #000;
          }
      }

      @include linear-gradient($bg-from, $bg-to, $bg-to);

      &:hover,
      &:focus,
      &:active,
      &.active {

        border-color: $tmp-border;
        border-bottom-color: darken($tmp-border, 10%);

        @if $type == ""
        {
          @if lightness($bg-to) < 50% {
            // dark color !
            @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
            color: #fff;
          } @else {
            @include text-shadow(1px, 1px, 0, #fff);
            color: #000;
          }
        } @elseif $type == "light" {
            @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
            color: #fff;
        } @else {
            @include text-shadow(1px, 1px, 0, #fff);
            color: #000;
        }

        @include linear-gradient(darken($bg-from, 3%), darken($bg-to, 3%), darken($bg-to, 3%));


      }
      .open & {
        &.dropdown-toggle {
          border-color: $tmp-border;
          border-bottom-color: darken($tmp-border, 10%);

          @if $type == ""
          {
            @if lightness($bg-to) < 50% {
              // dark color !
              @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
              color: #fff;
            } @else {
              @include text-shadow(1px, 1px, 0, #fff);
              color: #000;
            }
          } @elseif $type == "light" {
              @include text-shadow(1px, 1px, 0, rgba(0,0,0,.3));
              color: #fff;
          } @else {
              @include text-shadow(1px, 1px, 0, #fff);
              color: #000;
          }

          @include linear-gradient($bg-from, $bg-to, $bg-to);

        }
      }
      &:active,
      &.active {

        border-color: darken($tmp-border, 10%);
        border-bottom-color: darken($tmp-border, 15%);

        @include set-box-shadow(0, 0, 12px, rgba(0,0,0,.2), inset);

        // &:hover {
        //     @include linear-gradient($state-test-default-bg-from, $state-test-default-bg-to, $state-test-default-bg-to);
        // }
      }

  }

  &.btn-icon-only > i {
    text-align: center;
    padding-left: 0;
    padding-right: 0;
    margin-right: 0 !important;
  }

  > i {
    color: $color;
  }

  .badge {
    color: $bg-from;
    background-color: $color;
  }
}

@mixin button-variant-fdgdf($color, $background, $border)
{
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active {
    color: $color;
    background-color: darken($background, 7%);
    @if $border != "" { border-color: darken($border, 10%); }
  }
  .open & { &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 7%);
    @if $border != "" { border-color: darken($border, 10%); }
  } }
  &:active,
  &.active {
    background-image: none;
    background-color: darken($background, 12%);

    &:hover {
      background-color: darken($background, 10%);
    }
  }
  .open & { &.dropdown-toggle {
    background-image: none;
  } }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: $background;
      @if $border != "" { border-color: $border; }
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}



// Labels
// -------------------------
@mixin label-variant($color)
{
  background-color: $color;
  &[href] {
    &:hover,
    &:focus {
      background-color: darken($color, 10%);
    }
  }
}



// Progress bars
// -------------------------
@mixin progress-bar-variant($color)
{
  background-color: $color;
  .progress-striped & {
    @include gradient-striped();
  }
}




// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5)
{
    // Color the label and help text
    &.help-block,
    &.help-inline,
    &.control-label,
    &.radio,
    &.checkbox,
    &.radio-inline,
    &.checkbox-inline,
    .help-block,
    .help-inline,
    .control-label,
    .radio,
    .checkbox,
    .radio-inline,
    .checkbox-inline  {
        color: $text-color;
    }
    
    // Set the border and box shadow on specific inputs to match
    .form-control {
        border-color: $border-color;
        @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
        &:focus {
            border-color: darken($border-color, 20%);
            $shadow: inset 0 2px 2px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 5%);
            @include box-shadow($shadow);
        }
    }
    // Set validation states also for addons
    .input-group-addon {
        color: $text-color;
        border-color: $border-color;
        background-color: $background-color;
    }
    // Optional feedback icon
    .form-control-feedback {
        color: $text-color;
    }
}


// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation-invalid($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5)
{
  // Color the label and help text
  &:not(form)  {
    .help-block,
    .help-inline,
    .control-label,
    .radio,
    .checkbox,
    .radio-inline,
    .checkbox-inline  {
      color: $text-color;
    }
  }
  // Set the border and box shadow on specific inputs to match
  &.form-control,
  .form-control {
    border-color: $border-color;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($border-color, 20%);
      $shadow: inset 0 2px 2px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 5%);
      @include box-shadow($shadow);
    }
  }
  // Set validation states also for addons
  &.input-group-addon,
  .input-group-addon {
    color: $text-color;
    border-color: $border-color;
    background-color: $background-color;
  }
  // Optional feedback icon
  &.form-control-feedback,
  .form-control-feedback {
    color: $text-color;
  }
}